int	ft_atoi(const char *str)
{
	int	i;
	int	sign;
	int	result;
	
	if(!str)
		return (0);
	i = 0;
	sign = 1;
	while(str[i] == ' ' || (str[i] >= '\t' && str[i] <= '\r'))
		i++;
	if(str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	result = 0;
	while(str[i] >= '0' && str[i] <= '9')
	{
		result = result * 10 + (str[i] - '0');
		i++;
	}
	return (sign * result);
}

void	ft_swap_int(int *a, int *b)
{
	if(a == NULL || b == NULL)
		return ;
	int	temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

char *ft_itoa_hex(unsigned int num)
{
    char    *str;
    int     len;
    unsigned int    tmp;

    len = 1;
    tmp = num;
    while (tmp /= 16)
        len++;
    str = malloc(len + 1);
    if (!str)
        return (NULL);
    str[len] = '\0';
    while (len--) {
        str[len] = "0123456789abcdef"[num % 16];
        num /= 16;
    }
    return (str);
}

void free_index(char **index, int n)
{
	int	i;
	if(index == NULL)
		return ;
	i = 0;
	while(i < n)
	{
		if(index[i] != NULL)
			free(index[i]);
		i++;
	}
	free(index);
}

void	*ft_memcpy(void *dest, const void *src, size_t num)
{
	unsigned char	*aux_src;
	unsigned char	*aux_dest;
	size_t			i;

	aux_src = (unsigned char *)src;
	aux_dest = (unsigned char *)dest;
	i = 0;
	if (num == 0 || dest == src)
		return (dest);
	while (i < num)
	{
		aux_dest[i] = aux_src[i];
		i++;
	}
	return (dest);
}

void bubble_sort(int *arr, int n)
{
    int i = 0, j, temp;
    while(i < n - 1)
    {
        j = 0;
        while(j < n - i - 1)
        {
            if(arr[j] > arr[j+1])
            {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
            j++;
        }
        i++;
    }
}

long long int ft_partition(int arr[], int low, int high)
{
	int pivot = arr[high], i = low - 1, j = low, tmp;
	while (j < high)
	{
		if (arr[j] <= pivot)
		{
			i++;
			tmp = arr[i];
			arr[i] = arr[j];
			arr[j] = tmp;
		}
		j++;
	}
	tmp = arr[i + 1];
	arr[i + 1] = arr[high];
	arr[high] = tmp;
	return (i + 1);
}

void ft_qsort(int arr[], int low, int high)
{
	long long int	pi;

	if (low < high)
	{
		pi = ft_partition(arr, low, high);
		ft_qsort(arr, low, pi - 1);
		ft_qsort(arr, pi + 1, high);
	}
}

char **ft_assign_index_hex(int original[], int n) {
    int *sorted = malloc(n * sizeof(int));
    char **index;

    if (!sorted) exit(1);
    ft_memcpy(sorted, original, n * sizeof(int));
   	ft_qsort(sorted, 0, n - 1);
    index = malloc(n * sizeof(char *));
    if (!index) exit(1);

    int i = 0;
    while (i < n) {
        int j = 0;
        while (j < n) {
            if (original[i] == sorted[j]) {
                index[i] = ft_itoa_hex(j);
                break;
            }
            j++;
        }
        i++;
    }
    free(sorted);
    return index;
}

void	ft_error(void)
{
	write(2, "Error\n", 6);
	exit(1);
}

void	copy_array(int *src, int *dest, int size)
{
	int	i;
	
	i = 0;
	while (i < size)
	{
		dest[i] = src[i];
		i++;
	}
}

void	fill_normalized_array(int *arr, int *copy, int *norm, int size)
{
	int	i;
	int	j;
	
	i = 0;
	while (i < size)
	{
		j = 0;
		while (j < size)
		{
			if (arr[i] == copy[j])
			{
				norm[i] = j;
				break;
			}
			j++;
		}
		i++;
	}
}

int	*normalize(int *arr, int a)
{
	int	*norm;
	int	*copy;

	norm = (int *)malloc(sizeof(int) * a);
	if (!norm)
		ft_error();
	copy = (int *)malloc(sizeof(int) * a);
	if (!copy)
	{
		free(norm);
		ft_error();
	}
	copy_array(arr, copy, a);
	bubble_sort(copy, a);
	fill_normalized_array(arr, copy, norm, a);
	free(copy);
	return (norm);
}

void op_pa(int *stackA, int *sizeA, int *stackB, int *sizeB)
{
    int value = stackB[0], i = 0;
    while(i < *sizeB - 1)
    {
        stackB[i] = stackB[i+1];
        i++;
    }
    (*sizeB)--;
    i = *sizeA;
    while(i > 0)
    {
        stackA[i] = stackA[i-1];
        i--;
    }
    stackA[0] = value;
    (*sizeA)++;
    printf("pa\n");
}

void op_pb(int *stackA, int *sizeA, int *stackB, int *sizeB)
{
    int value = stackA[0], i = 0;
    while(i < *sizeA - 1)
    {
        stackA[i] = stackA[i+1];
        i++;
    }
    (*sizeA)--;
    i = *sizeB;
    while(i > 0)
    {
        stackB[i] = stackB[i-1];
        i--;
    }
    stackB[0] = value;
    (*sizeB)++;
    printf("pb\n");
}

void ft_print_stack(int *stack, int size)
{
	int	i;

	i  = 0;
	while(i < size)
	{
		printf("%d ", stack[i]);
		i++;
	}
	printf("\n");
}
void ft_print_stack_hex(int *stack, int size)
{
	int	i;

	i  = 0;
	while(i < size)
	{
		printf("%X ", stack[i]);
		i++;
	}
	printf("\n");
}

void push_back(int *stackA, int *sizeA, int *stackB, int *sizeB)
{
    while(*sizeB > 0)
    {
        int max_i = find_max_index(stackB, *sizeB);
        if(max_i <= *sizeB / 2)
        {
            int i = max_i;
            while(i-- > 0)
                op_rb(stackB, sizeB);
        }
        else
        {
            int r = *sizeB - max_i;
            while(r-- > 0)
                op_rrb(stackB, sizeB);
        }
        op_pa(stackA, sizeA, stackB, sizeB);
    }
}

int find_max_index(int *stack, int size)
{
    int max = stack[0], idx = 0, i = 1;
    while(i < size)
    {
        if(stack[i] > max)
        {
            max = stack[i];
            idx = i;
        }
        i++;
    }
    return idx;
}

void chunk_sort(int *stackA, int *sizeA, int *stackB, int *sizeB, int n, int chunk)
{
    int current = chunk, pushed = 0;
    while(*sizeA > 0)
    {
        if(stackA[0] < current)
        {
            op_pb(stackA, sizeA, stackB, sizeB);
            pushed++;
            if(pushed == current && current < n)
                current += chunk;
        }
        else
            op_ra(stackA, sizeA);
    }
}

void op_ra(int *stackA, int *sizeA)
{
    int temp = stackA[0], i = 0;
    while(i < *sizeA - 1)
    {
        stackA[i] = stackA[i+1];
        i++;
    }
    stackA[*sizeA - 1] = temp;
    printf("ra\n");
}
void op_rb(int *stackB, int *sizeB)
{
    int temp = stackB[0], i = 0;
    while(i < *sizeB - 1)
    {
        stackB[i] = stackB[i+1];
        i++;
    }
    stackB[*sizeB - 1] = temp;
    printf("rb\n");
}

void rotate_no_print(int **stack, int *size)
{
    int *temp = stack[0];
    int i = 0;
    while (i < *size - 1)
    {
        stack[i] = stack[i + 1];
        i++;
    }
    stack[*size - 1] = temp;
}
void op_rrb(int *stackB, int *sizeB)
{
    int temp = stackB[*sizeB - 1], i = *sizeB - 1;
    while(i > 0)
    {
        stackB[i] = stackB[i-1];
        i--;
    }
    stackB[0] = temp;
    printf("rrb\n");
}

void parse_and_validate(int argc, char **argv, int **arr, int *n)
{
	int i, j;
	*n = argc - 1;
	*arr = (int *)malloc(sizeof(int) * (*n));
	if (!*arr)
		ft_error();
	i = 1;
	while (i < argc)
	{
		(*arr)[i - 1] = ft_atoi(argv[i]);
		i++;
	}
	i = 0;
	while (i < *n)
	{
		j = i + 1;
		while (j < *n)
		{
			if ((*arr)[i] == (*arr)[j])
				ft_error();
			j++;
		}
		i++;
	}
}

int main(int ac, char **av)
{
    int n, i;
    int *arr, *norm;
    
    if (ac < 2)
        return 0;
    n = ac - 1;
    arr = malloc(n * sizeof(int));
    if (!arr)
        ft_error();
    i = 0;
    while(i < n)
    {
        arr[i] = ft_atoi(av[i+1]);
        i++;
    }
    // Normaliza el array: ahora los valores estarán entre 0 y n-1
    norm = normalize(arr, n);
    
    // Usa 'norm' como stackA en chunk sort.
    int *stackA = norm;
    int sizeA = n, sizeB = 0;
    int *stackB = malloc(n * sizeof(int));
    if (!stackB)
        ft_error();
    // Ajusta el chunk según la cantidad de números
    int chunk = (n == 100) ? 20 : (n == 500 ? 45 : 20);
    chunk_sort(stackA, &sizeA, stackB, &sizeB, n, chunk);
    push_back(stackA, &sizeA, stackB, &sizeB);
    
    free(stackB);
    free(norm);
    free(arr);
    return 0;
}