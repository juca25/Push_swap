int ft_find_max(int *stack, int size) {
    int max = stack[0];
    int i = 1;
    while (i < size) {
        if (stack[i] > max)
            max = stack[i];
        i++;
    }
    return max;
}

// Radix Sort con base 16
void ft_radix_sort(int *stackA, int *sizeA, int *stackB, int *sizeB) {
    if (*sizeA <= 0) return;

    // Encontrar el valor máximo
    int max = ft_find_max(stackA, *sizeA);
    int max_digits = 0;

    // Calcular cuántos dígitos hexadecimales tiene el número más grande
    while (max > 0) {
        max >>= 4; // Dividir por 16
        max_digits++;
    }

    // Ordenar por cada dígito en base 16
    int digit = 0;
    while (digit < max_digits) {
        int bucket = 0;
        while (bucket < 16 ) {
            int count = *sizeA;
            int processed = 0;
            while (count > 0 ) {
                while(processed < count) {
                    int current_digit = (stackA[0] >> (digit * 4)) & 0xF;
                    if (current_digit == bucket) 
                        push_b(stackA, sizeA, stackB, sizeB);
                    else
                        ft_rotate(stackA, *sizeA);
                    processed++;
                }
                count--;
            }
            push_a(stackA, sizeA, stackB, sizeB);
            bucket++;
        }
        digit++;
    }
}