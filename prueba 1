#include "push_swap.h"
void ft_qsort(int arr[], int low, int high)
{
	long long int	pi;

	if (low < high)
	{
		pi = ft_partition(arr, low, high);
		ft_qsort(arr, low, pi - 1);
		ft_qsort(arr, pi + 1, high);
	}
}

char **ft_assign_index_hex(int original[], int n) {
    int *sorted = malloc(n * sizeof(int));
    char **index;

    if (!sorted) exit(1);
    ft_memcpy(sorted, original, n * sizeof(int));
   	ft_qsort(sorted, 0, n - 1);
    index = malloc(n * sizeof(char *));
    if (!index) exit(1);

    int i = 0;
    while (i < n) {
        int j = 0;
        while (j < n) {
            if (original[i] == sorted[j]) {
                index[i] = ft_itoa_hex(j);
                break;
            }
            j++;
        }
        i++;
    }
    free(sorted);
    return index;
}
int is_duplicate(int *stack, int size) {
	int i = 0;
	while (i < size) {
		int j = i + 1;
		while (j < size) {
			if (stack[i] == stack[j]) {
				return 1;
			}
			j++;
		}
		i++;
	}
	return 0;
}

void ft_swap(int *stack, int size)
{
	int	temp;
	if(stack == NULL || size < 2)
		return ;
	temp = stack[0];
	stack[0] = stack[1];
	stack[1] = temp;
}

void ft_rotate(int *stack, int size) {
    if (size <= 1) return;
    int first = stack[0];
    int i = 0;
    while (i < size - 1) {
        stack[i] = stack[i + 1];
        i++;
    }
    stack[size - 1] = first;
}

void ft_reverse_rotate(int *stack, int size) {
    int temp;
    int i;
    if (stack == NULL || size < 2)
        return;
    temp = stack[size - 1];
    i = size - 1;
    while(i > 0) {
        stack[i] = stack[i - 1];
        i--;
    }
    stack[0] = temp;
}

void push_b(int *stackA, int *sizeA, int *stackB, int *sizeB) {
    if (*sizeA <= 0) return;
    stackB[*sizeB] = stackA[0];
    (*sizeB)++;
    int i = 0;
    while (i < *sizeA - 1) {
        stackA[i] = stackA[i + 1];
        i++;
    }
    (*sizeA)--;
}

void push_a(int *stackA, int *sizeA, int *stackB, int *sizeB) {
    if (*sizeB <= 0) return;
    int i = *sizeA;
    while (i > 0) {
        stackA[i] = stackA[i - 1];
        i--;
    }
    stackA[0] = stackB[0];
    (*sizeA)++;
    i = 0;
    while (i < *sizeB - 1) {
        stackB[i] = stackB[i + 1];
        i++;
    }
    (*sizeB)--;
}

int ft_find_max(int *stack, int size) {
    int max = stack[0];
    int i = 1;
    while (i < size) {
        if (stack[i] > max)
            max = stack[i];
        i++;
    }
    return max;
}

// Radix Sort con base 16
void ft_radix_sort(int *stackA, int *sizeA, int *stackB, int *sizeB) {
    if (*sizeA <= 0) return;

    // Encontrar el valor máximo
    int max = ft_find_max(stackA, *sizeA);
    int max_digits = 0;

    // Calcular cuántos dígitos hexadecimales tiene el número más grande
    while (max > 0) {
        max >>= 4; // Dividir por 16
        max_digits++;
    }

    // Ordenar por cada dígito en base 16
    int digit = 0;
    while (digit < max_digits) {
        int bucket = 0;
        while (bucket < 16 ) {
            int count = *sizeA;
            int processed = 0;
            while (count > 0 ) {
                while(processed < count) {
                    int current_digit = (stackA[0] >> (digit * 4)) & 0xF;
                    if (current_digit == bucket) 
                        push_b(stackA, sizeA, stackB, sizeB);
                    else
                        ft_rotate(stackA, *sizeA);
                    processed++;
                }
                count--;
            }
            push_a(stackA, sizeA, stackB, sizeB);
            bucket++;
        }
        digit++;
    }
}